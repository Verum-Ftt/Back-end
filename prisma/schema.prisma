generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                          String              @id            @default(uuid())

  name                        String
  email                       String              @unique
  is_active                   Boolean             @default(true)
  phone                       String              @unique
  RA                          String              @unique
  date_created                DateTime            @default(now())
  period                      String
  course                      String
  grade                       String

  qrCodes                     QrCode[]
  student_subjective          StudentSubjective[]

  @@map("students")
}

model Academic {
  id                          String                @id            @default(uuid())

  name                        String
  email                       String                @unique
  is_active                   Boolean               @default(true)
  phone                       String                @unique
  RA                          String                @unique
  date_created                DateTime              @default(now())
  password                    String

  registers                   Register[]
  sub_events                  SubEvent[]
  events                      Event[]
  advices                     Advice[]
  subjectives                 Subjective[]

  @@map("academics")
}

model QrCode {
  id                          String               @id             @default(uuid())
  student_id                  String               
  sub_event_id                String               
  laboratory_id               String?             

  date_created                DateTime             @default(now())
  updated_at                  DateTime             @updatedAt      
  image                       String
  valid                       Boolean              @default(true)  
  randomization_version       Int                  @default(1)     

  student                     Student              @relation(fields: [student_id], references: [id])
  sub_events                  SubEvent             @relation(fields: [sub_event_id], references: [id])
  laboratory                  Laboratory?          @relation(fields: [laboratory_id], references: [id])

  registers                   Register[]

  @@unique([student_id, sub_event_id])       
  @@map("qrCodes")
}

model Register {
  id                           String               @id             @default(uuid())
  qr_code_id                   String               
  academic_id                  String
  sub_event_id                 String

  registered_at                DateTime             @default(now()) 

  qrCode                       QrCode               @relation(fields: [qr_code_id], references: [id])
  academic                     Academic             @relation(fields: [academic_id], references: [id])
  subEvent                     SubEvent             @relation(fields: [sub_event_id], references: [id])

  @@map("registers")
}

model SubEvent {
  id                           String               @id             @default(uuid())
  created_by                   String                  
  event_id                     String                  
  subjective_id                String

  title                        String
  description                  String                  
  sub_event_date               DateTime
  date_created                 DateTime             @default(now())         

  academic                     Academic             @relation(fields: [created_by], references: [id])
  event                        Event                @relation(fields: [event_id], references: [id])
  subjective                   Subjective           @relation(fields: [subjective_id], references: [id])

  advices                      Advice[]
  registers                    Register[]
  QrCode                       QrCode[]     

  @@map("sub_events")
}

model Subjective {
  id                           String               @id             @default(uuid())
  created_by                   String

  title                        String
  description                  String
  date_created                 DateTime             @default(now())

  academic                     Academic             @relation(fields: [created_by], references: [id])

  student_subjectives          StudentSubjective[]
  sub_events                   SubEvent[]
  
  @@map("subjectives")
}

model StudentSubjective {
  id                           String                @id             @default(uuid())
  student_id                   String
  subjective_id                String

  student                      Student               @relation(fields: [student_id], references: [id])
  subjective                   Subjective            @relation(fields: [subjective_id], references: [id])

  @@unique([student_id, subjective_id])
  @@map("student_subjectives")
}

model Event {
  id                           String                @id            @default(uuid())
  created_by                   String                

  title                        String
  event_date                         DateTime          
  description                  String
  date_created                 DateTime             @default(now())
  is_active                    Boolean              @default(true)
  
  academic                     Academic             @relation(fields: [created_by], references: [id])

  sub_events                   SubEvent[]

  @@map("events")
}

model Laboratory {
  id                            String               @id             @default(uuid())
  
  local                         String?  
  total_capacity                Int
  available_capacity            Int
  date_created                  DateTime             @default(now())
  last_updated                  DateTime             @updatedAt

  qrCodes                       QrCode[]
  advices                       Advice[]

  @@map("laboratories")
}

model Advice {
  id                            String                @id            @default(uuid())
  laboratory_id                 String                
  sub_event_id                  String                
  created_by                    String                

  description                   String
  seats_affected                Int                  // Quantos assentos s√£o afetados por este advice
  tier                          Tier                  @default(LOW)
  date_created                  DateTime              @default(now())
  resolved                      Boolean               @default(false) // Se o problema foi resolvido

  laboratory                    Laboratory            @relation(fields: [laboratory_id], references: [id])
  sub_event                     SubEvent              @relation(fields: [sub_event_id], references: [id])
  academic                      Academic              @relation(fields: [created_by], references: [id])
  
  @@map("advices")
}

enum Tier {
  LOW
  MEDIUM
  HIGH
}